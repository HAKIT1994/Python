import random
import pygame
from blobs import Blob
import numpy as np
import logging

logging.basicConfig(level=logging.INFO)

Starting_blue= 30
Starting_red=13
Starting_green=15

WIDTH = 800
HEIGHT = 600
WHITE = (255,255,255)
BLUE = (0,0,255)
RED = (255,0,0)

game_display = pygame.display.set_mode((WIDTH, HEIGHT))
pygame.display.set_caption("Blob World")
clock = pygame.time.Clock()



class BlueBlob(Blob):

    def __init__(self, x_boundary, y_boundary):
        Blob.__init__(self, (0, 0, 255), x_boundary, y_boundary)

    def __add__ (self, other_blob):
        logging.info('Blob add op {} + {}'.format(repr(self),repr(other_blob)))
        if other_blob.color == (255,0,0):
            self.size -= other_blob.size
            other_blob.size -= self.size
        elif other_blob.color == (0,255,0):
            self.size += other_blob.size
            other_blob.size = 0
        elif other_blob.color == (0,0,255):
            pass
        else:
            raise Exception('Combine error')

class RedBlob(Blob):

    def __init__(self, x_boundary, y_boundary):
        Blob.__init__(self, (255, 0, 0), x_boundary, y_boundary)


class GreenBlob(Blob):

    def __init__(self, x_boundary, y_boundary):
        Blob.__init__(self, (0, 255, 0), x_boundary, y_boundary)

def is_touching(b1,b2):
    return np.linalg.norm(np.array([b1.x,b1.y])-np.array([b2.x,b2.y]))<(b1.size+b2.size)

def handle_collision(blob_list):
    blues,reds,greens = blob_list
    for blue_id, blue_blob in blues.copy().items():
        for other_blobs in blues,reds,greens:
            for other_blob_id, other_blob in other_blobs.copy().items():
                logging.debug('Checking if blobs are touching {}+{}'.format(repr(blue_blob),repr(other_blob)))
                if blue_blob == other_blob:
                    pass
                else:
                    if is_touching(blue_blob, other_blob):
                        blue_blob + other_blob
                        if other_blob.size <= 0:
                            del other_blobs[other_blob_id]
                        if blue_blob.size <= 0:
                            del blues[blue_id]
    return blues,reds,greens


def draw_enviroment(blobs_list):

    blues, reds, greens = handle_collision(blobs_list)
    game_display.fill(WHITE)
    for blobs_dict in blobs_list:
        for blob_id in blobs_dict:
            blob = blobs_dict[blob_id]
            pygame.draw.circle(game_display,blob.color,[blob.x,blob.y], blob.size)
            blob.move()
            blob.checkbound()
    pygame.display.update()
    return blues, reds, greens


def main():
    blue_blobs = dict(enumerate([BlueBlob(WIDTH,HEIGHT) for i in range(Starting_blue)]))
    red_blobs = dict(enumerate([RedBlob(WIDTH,HEIGHT) for i in range(Starting_red)]))
    green_blobs = dict(enumerate([GreenBlob(WIDTH, HEIGHT) for i in range(Starting_green)]))



    while True:
        try:
            for event in pygame.event.get():
                if event.type == pygame.QUIT:
                    pygame.quit()
                    quit()

                blue_blobs,red_blobs,green_blobs = draw_enviroment([blue_blobs,red_blobs,green_blobs])
                clock.tick(60)
        except Exception as e:
            logging.critical(str(e))
            pygame.quit()
            quit()
            break
            #print(blue_blobs.x,blue_blobs.y)
if __name__ == '__main__':
    main()
